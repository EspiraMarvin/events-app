import Head from "next/head"
import NavBar from "../components/NavBar"
import { useEffect, lazy } from "react"
import { useSession, getSession } from "next-auth/react"
import { useAppDispatch, useAppSelector } from "../hooks/useTypeSelectorHook"
import { getEvents } from "../slices/eventSlice"
import { setCredential, setFirebaseUser } from "../slices/authSlice"
import { useFetchEventsQuery } from "../slices/events-api-slice"
import { useRouter } from "next/router"
import { useAuth } from "../context/AuthContext"
import Loader from "../components/Loader"
const Calendar = lazy(() => import("../components/Calendar"))

const Home = () => {
  const { data: session } = useSession()
  const router = useRouter()
  const { currentUser } = useAuth()

  return (
    <div className="">
      <Head>
        <title>Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {currentUser ? User({ currentUser }) : <Loader />}
    </div>
  )
}

export default Home

// Authorize User
function User({ session, currentUser }: any) {
  const dispatch = useAppDispatch()
  dispatch(setCredential(session?.user))
  dispatch(setFirebaseUser(currentUser))

  const { data = [], isFetching } = useFetchEventsQuery()

  // console.log("data at react query", data)
  useEffect(() => {
    dispatch(getEvents())
  }, [dispatch])

  const { allEvents, events, loading } = useAppSelector((state) => state.event)

  return (
    <main className="h-screen bg-white dark:bg-black md:h-screen">
      <NavBar />
      <div className="px-2 text-xl font-bold text-center text-black pt-28 text-shadow-md dark:text-white md:mr-0 md:pb-10 md:pt-36 md:text-xl lg:text-2xl 2xl:text-3xl">
        Events Around You!
      </div>
      <div className="max-w-md py-6 mx-auto sm:px-7 md:max-w-4xl md:px-2 md:py-10">
        {events && <Calendar events={events} />}
      </div>
    </main>
  )
}

export async function getServerSideProps({ req }: any) {
  const session = await getSession({ req })

  // if (!session) return { redirect: { destination: "/login", permanent: false } }

  return {
    props: { session },
  }
}
